{
  "version": 3,
  "sources": ["../../simplify-js/simplify.js"],
  "sourcesContent": ["/*\n (c) 2017, Vladimir Agafonkin\n Simplify.js, a high-performance JS polyline simplification library\n mourner.github.io/simplify-js\n*/\n\n(function () { 'use strict';\n\n// to suit your point format, run search/replace for '.x' and '.y';\n// for 3D version, see 3d branch (configurability would draw significant performance overhead)\n\n// square distance between 2 points\nfunction getSqDist(p1, p2) {\n\n    var dx = p1.x - p2.x,\n        dy = p1.y - p2.y;\n\n    return dx * dx + dy * dy;\n}\n\n// square distance from a point to a segment\nfunction getSqSegDist(p, p1, p2) {\n\n    var x = p1.x,\n        y = p1.y,\n        dx = p2.x - x,\n        dy = p2.y - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((p.x - x) * dx + (p.y - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = p2.x;\n            y = p2.y;\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = p.x - x;\n    dy = p.y - y;\n\n    return dx * dx + dy * dy;\n}\n// rest of the code doesn't care about point format\n\n// basic distance-based simplification\nfunction simplifyRadialDist(points, sqTolerance) {\n\n    var prevPoint = points[0],\n        newPoints = [prevPoint],\n        point;\n\n    for (var i = 1, len = points.length; i < len; i++) {\n        point = points[i];\n\n        if (getSqDist(point, prevPoint) > sqTolerance) {\n            newPoints.push(point);\n            prevPoint = point;\n        }\n    }\n\n    if (prevPoint !== point) newPoints.push(point);\n\n    return newPoints;\n}\n\nfunction simplifyDPStep(points, first, last, sqTolerance, simplified) {\n    var maxSqDist = sqTolerance,\n        index;\n\n    for (var i = first + 1; i < last; i++) {\n        var sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n        if (sqDist > maxSqDist) {\n            index = i;\n            maxSqDist = sqDist;\n        }\n    }\n\n    if (maxSqDist > sqTolerance) {\n        if (index - first > 1) simplifyDPStep(points, first, index, sqTolerance, simplified);\n        simplified.push(points[index]);\n        if (last - index > 1) simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points, sqTolerance) {\n    var last = points.length - 1;\n\n    var simplified = [points[0]];\n    simplifyDPStep(points, 0, last, sqTolerance, simplified);\n    simplified.push(points[last]);\n\n    return simplified;\n}\n\n// both algorithms combined for awesome performance\nfunction simplify(points, tolerance, highestQuality) {\n\n    if (points.length <= 2) return points;\n\n    var sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n\n    points = highestQuality ? points : simplifyRadialDist(points, sqTolerance);\n    points = simplifyDouglasPeucker(points, sqTolerance);\n\n    return points;\n}\n\n// export as AMD module / Node module / browser or worker variable\nif (typeof define === 'function' && define.amd) define(function() { return simplify; });\nelse if (typeof module !== 'undefined') {\n    module.exports = simplify;\n    module.exports.default = simplify;\n} else if (typeof self !== 'undefined') self.simplify = simplify;\nelse window.simplify = simplify;\n\n})();\n"],
  "mappings": ";;;;;AAAA;AAAA;AAMA,KAAC,WAAY;AAAE;AAMf,eAAS,UAAU,IAAI,IAAI;AAEvB,YAAI,KAAK,GAAG,IAAI,GAAG,GACf,KAAK,GAAG,IAAI,GAAG;AAEnB,eAAO,KAAK,KAAK,KAAK;AAAA,MAC1B;AAGA,eAAS,aAAa,GAAG,IAAI,IAAI;AAE7B,YAAI,IAAI,GAAG,GACP,IAAI,GAAG,GACP,KAAK,GAAG,IAAI,GACZ,KAAK,GAAG,IAAI;AAEhB,YAAI,OAAO,KAAK,OAAO,GAAG;AAEtB,cAAI,MAAM,EAAE,IAAI,KAAK,MAAM,EAAE,IAAI,KAAK,OAAO,KAAK,KAAK,KAAK;AAE5D,cAAI,IAAI,GAAG;AACP,gBAAI,GAAG;AACP,gBAAI,GAAG;AAAA,UAEX,WAAW,IAAI,GAAG;AACd,iBAAK,KAAK;AACV,iBAAK,KAAK;AAAA,UACd;AAAA,QACJ;AAEA,aAAK,EAAE,IAAI;AACX,aAAK,EAAE,IAAI;AAEX,eAAO,KAAK,KAAK,KAAK;AAAA,MAC1B;AAIA,eAAS,mBAAmB,QAAQ,aAAa;AAE7C,YAAI,YAAY,OAAO,CAAC,GACpB,YAAY,CAAC,SAAS,GACtB;AAEJ,iBAAS,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK,KAAK;AAC/C,kBAAQ,OAAO,CAAC;AAEhB,cAAI,UAAU,OAAO,SAAS,IAAI,aAAa;AAC3C,sBAAU,KAAK,KAAK;AACpB,wBAAY;AAAA,UAChB;AAAA,QACJ;AAEA,YAAI,cAAc,MAAO,WAAU,KAAK,KAAK;AAE7C,eAAO;AAAA,MACX;AAEA,eAAS,eAAe,QAAQ,OAAO,MAAM,aAAa,YAAY;AAClE,YAAI,YAAY,aACZ;AAEJ,iBAAS,IAAI,QAAQ,GAAG,IAAI,MAAM,KAAK;AACnC,cAAI,SAAS,aAAa,OAAO,CAAC,GAAG,OAAO,KAAK,GAAG,OAAO,IAAI,CAAC;AAEhE,cAAI,SAAS,WAAW;AACpB,oBAAQ;AACR,wBAAY;AAAA,UAChB;AAAA,QACJ;AAEA,YAAI,YAAY,aAAa;AACzB,cAAI,QAAQ,QAAQ,EAAG,gBAAe,QAAQ,OAAO,OAAO,aAAa,UAAU;AACnF,qBAAW,KAAK,OAAO,KAAK,CAAC;AAC7B,cAAI,OAAO,QAAQ,EAAG,gBAAe,QAAQ,OAAO,MAAM,aAAa,UAAU;AAAA,QACrF;AAAA,MACJ;AAGA,eAAS,uBAAuB,QAAQ,aAAa;AACjD,YAAI,OAAO,OAAO,SAAS;AAE3B,YAAI,aAAa,CAAC,OAAO,CAAC,CAAC;AAC3B,uBAAe,QAAQ,GAAG,MAAM,aAAa,UAAU;AACvD,mBAAW,KAAK,OAAO,IAAI,CAAC;AAE5B,eAAO;AAAA,MACX;AAGA,eAAS,SAAS,QAAQ,WAAW,gBAAgB;AAEjD,YAAI,OAAO,UAAU,EAAG,QAAO;AAE/B,YAAI,cAAc,cAAc,SAAY,YAAY,YAAY;AAEpE,iBAAS,iBAAiB,SAAS,mBAAmB,QAAQ,WAAW;AACzE,iBAAS,uBAAuB,QAAQ,WAAW;AAEnD,eAAO;AAAA,MACX;AAGA,UAAI,OAAO,WAAW,cAAc,OAAO,IAAK,QAAO,WAAW;AAAE,eAAO;AAAA,MAAU,CAAC;AAAA,eAC7E,OAAO,WAAW,aAAa;AACpC,eAAO,UAAU;AACjB,eAAO,QAAQ,UAAU;AAAA,MAC7B,WAAW,OAAO,SAAS,YAAa,MAAK,WAAW;AAAA,UACnD,QAAO,WAAW;AAAA,IAEvB,GAAG;AAAA;AAAA;",
  "names": []
}
